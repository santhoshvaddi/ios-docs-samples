// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/Translate/v3/translation_service.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import <stdatomic.h>

#import "google/cloud/Translate/v3/TranslationService.pbobjc.h"
#import <googleapis/Annotations.pbobjc.h>
#import <googleapis/Operations.pbobjc.h>
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdirect-ivar-access"

#pragma mark - TranslationServiceRoot

@implementation TranslationServiceRoot

+ (GPBExtensionRegistry*)extensionRegistry {
  // This is called by +initialize so there is no need to worry
  // about thread safety and initialization of registry.
  static GPBExtensionRegistry* registry = nil;
  if (!registry) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    registry = [[GPBExtensionRegistry alloc] init];
    // Merge in the imports (direct or indirect) that defined extensions.
    [registry addExtensions:[AnnotationsRoot extensionRegistry]];
  }
  return registry;
}

@end

#pragma mark - TranslationServiceRoot_FileDescriptor

static GPBFileDescriptor *TranslationServiceRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"google.cloud.translation.v3"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - TranslateTextGlossaryConfig

@implementation TranslateTextGlossaryConfig

@dynamic glossary;
@dynamic ignoreCase;

typedef struct TranslateTextGlossaryConfig__storage_ {
  uint32_t _has_storage_[1];
  NSString *glossary;
} TranslateTextGlossaryConfig__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "glossary",
        .dataTypeSpecific.className = NULL,
        .number = TranslateTextGlossaryConfig_FieldNumber_Glossary,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(TranslateTextGlossaryConfig__storage_, glossary),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "ignoreCase",
        .dataTypeSpecific.className = NULL,
        .number = TranslateTextGlossaryConfig_FieldNumber_IgnoreCase,
        .hasIndex = 1,
        .offset = 2,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[TranslateTextGlossaryConfig class]
                                     rootClass:[TranslationServiceRoot class]
                                          file:TranslationServiceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(TranslateTextGlossaryConfig__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - TranslateTextRequest

@implementation TranslateTextRequest

@dynamic contentsArray, contentsArray_Count;
@dynamic mimeType;
@dynamic sourceLanguageCode;
@dynamic targetLanguageCode;
@dynamic parent;
@dynamic model;
@dynamic hasGlossaryConfig, glossaryConfig;
@dynamic labels, labels_Count;

typedef struct TranslateTextRequest__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *contentsArray;
  NSString *mimeType;
  NSString *sourceLanguageCode;
  NSString *targetLanguageCode;
  NSString *model;
  TranslateTextGlossaryConfig *glossaryConfig;
  NSString *parent;
  NSMutableDictionary *labels;
} TranslateTextRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "contentsArray",
        .dataTypeSpecific.className = NULL,
        .number = TranslateTextRequest_FieldNumber_ContentsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(TranslateTextRequest__storage_, contentsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "mimeType",
        .dataTypeSpecific.className = NULL,
        .number = TranslateTextRequest_FieldNumber_MimeType,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(TranslateTextRequest__storage_, mimeType),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "sourceLanguageCode",
        .dataTypeSpecific.className = NULL,
        .number = TranslateTextRequest_FieldNumber_SourceLanguageCode,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(TranslateTextRequest__storage_, sourceLanguageCode),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "targetLanguageCode",
        .dataTypeSpecific.className = NULL,
        .number = TranslateTextRequest_FieldNumber_TargetLanguageCode,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(TranslateTextRequest__storage_, targetLanguageCode),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "model",
        .dataTypeSpecific.className = NULL,
        .number = TranslateTextRequest_FieldNumber_Model,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(TranslateTextRequest__storage_, model),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "glossaryConfig",
        .dataTypeSpecific.className = GPBStringifySymbol(TranslateTextGlossaryConfig),
        .number = TranslateTextRequest_FieldNumber_GlossaryConfig,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(TranslateTextRequest__storage_, glossaryConfig),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "parent",
        .dataTypeSpecific.className = NULL,
        .number = TranslateTextRequest_FieldNumber_Parent,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(TranslateTextRequest__storage_, parent),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "labels",
        .dataTypeSpecific.className = NULL,
        .number = TranslateTextRequest_FieldNumber_Labels,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(TranslateTextRequest__storage_, labels),
        .flags = GPBFieldMapKeyString,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[TranslateTextRequest class]
                                     rootClass:[TranslationServiceRoot class]
                                          file:TranslationServiceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(TranslateTextRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - TranslateTextResponse

@implementation TranslateTextResponse

@dynamic translationsArray, translationsArray_Count;
@dynamic glossaryTranslationsArray, glossaryTranslationsArray_Count;

typedef struct TranslateTextResponse__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *translationsArray;
  NSMutableArray *glossaryTranslationsArray;
} TranslateTextResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "translationsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(Translation),
        .number = TranslateTextResponse_FieldNumber_TranslationsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(TranslateTextResponse__storage_, translationsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "glossaryTranslationsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(Translation),
        .number = TranslateTextResponse_FieldNumber_GlossaryTranslationsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(TranslateTextResponse__storage_, glossaryTranslationsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[TranslateTextResponse class]
                                     rootClass:[TranslationServiceRoot class]
                                          file:TranslationServiceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(TranslateTextResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Translation

@implementation Translation

@dynamic translatedText;
@dynamic model;
@dynamic detectedLanguageCode;
@dynamic hasGlossaryConfig, glossaryConfig;

typedef struct Translation__storage_ {
  uint32_t _has_storage_[1];
  NSString *translatedText;
  NSString *model;
  TranslateTextGlossaryConfig *glossaryConfig;
  NSString *detectedLanguageCode;
} Translation__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "translatedText",
        .dataTypeSpecific.className = NULL,
        .number = Translation_FieldNumber_TranslatedText,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Translation__storage_, translatedText),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "model",
        .dataTypeSpecific.className = NULL,
        .number = Translation_FieldNumber_Model,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Translation__storage_, model),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "glossaryConfig",
        .dataTypeSpecific.className = GPBStringifySymbol(TranslateTextGlossaryConfig),
        .number = Translation_FieldNumber_GlossaryConfig,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(Translation__storage_, glossaryConfig),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "detectedLanguageCode",
        .dataTypeSpecific.className = NULL,
        .number = Translation_FieldNumber_DetectedLanguageCode,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Translation__storage_, detectedLanguageCode),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Translation class]
                                     rootClass:[TranslationServiceRoot class]
                                          file:TranslationServiceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Translation__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DetectLanguageRequest

@implementation DetectLanguageRequest

@dynamic sourceOneOfCase;
@dynamic parent;
@dynamic model;
@dynamic content;
@dynamic mimeType;
@dynamic labels, labels_Count;

typedef struct DetectLanguageRequest__storage_ {
  uint32_t _has_storage_[2];
  NSString *content;
  NSString *mimeType;
  NSString *model;
  NSString *parent;
  NSMutableDictionary *labels;
} DetectLanguageRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "content",
        .dataTypeSpecific.className = NULL,
        .number = DetectLanguageRequest_FieldNumber_Content,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(DetectLanguageRequest__storage_, content),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "mimeType",
        .dataTypeSpecific.className = NULL,
        .number = DetectLanguageRequest_FieldNumber_MimeType,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(DetectLanguageRequest__storage_, mimeType),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "model",
        .dataTypeSpecific.className = NULL,
        .number = DetectLanguageRequest_FieldNumber_Model,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(DetectLanguageRequest__storage_, model),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "parent",
        .dataTypeSpecific.className = NULL,
        .number = DetectLanguageRequest_FieldNumber_Parent,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DetectLanguageRequest__storage_, parent),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "labels",
        .dataTypeSpecific.className = NULL,
        .number = DetectLanguageRequest_FieldNumber_Labels,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(DetectLanguageRequest__storage_, labels),
        .flags = GPBFieldMapKeyString,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DetectLanguageRequest class]
                                     rootClass:[TranslationServiceRoot class]
                                          file:TranslationServiceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DetectLanguageRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    static const char *oneofs[] = {
      "source",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

void DetectLanguageRequest_ClearSourceOneOfCase(DetectLanguageRequest *message) {
  GPBDescriptor *descriptor = [message descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBMaybeClearOneof(message, oneof, -1, 0);
}
#pragma mark - DetectedLanguage

@implementation DetectedLanguage

@dynamic languageCode;
@dynamic confidence;

typedef struct DetectedLanguage__storage_ {
  uint32_t _has_storage_[1];
  float confidence;
  NSString *languageCode;
} DetectedLanguage__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "languageCode",
        .dataTypeSpecific.className = NULL,
        .number = DetectedLanguage_FieldNumber_LanguageCode,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DetectedLanguage__storage_, languageCode),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "confidence",
        .dataTypeSpecific.className = NULL,
        .number = DetectedLanguage_FieldNumber_Confidence,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(DetectedLanguage__storage_, confidence),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeFloat,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DetectedLanguage class]
                                     rootClass:[TranslationServiceRoot class]
                                          file:TranslationServiceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DetectedLanguage__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DetectLanguageResponse

@implementation DetectLanguageResponse

@dynamic languagesArray, languagesArray_Count;

typedef struct DetectLanguageResponse__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *languagesArray;
} DetectLanguageResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "languagesArray",
        .dataTypeSpecific.className = GPBStringifySymbol(DetectedLanguage),
        .number = DetectLanguageResponse_FieldNumber_LanguagesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(DetectLanguageResponse__storage_, languagesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DetectLanguageResponse class]
                                     rootClass:[TranslationServiceRoot class]
                                          file:TranslationServiceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DetectLanguageResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetSupportedLanguagesRequest

@implementation GetSupportedLanguagesRequest

@dynamic parent;
@dynamic displayLanguageCode;
@dynamic model;

typedef struct GetSupportedLanguagesRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *displayLanguageCode;
  NSString *model;
  NSString *parent;
} GetSupportedLanguagesRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "displayLanguageCode",
        .dataTypeSpecific.className = NULL,
        .number = GetSupportedLanguagesRequest_FieldNumber_DisplayLanguageCode,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetSupportedLanguagesRequest__storage_, displayLanguageCode),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "model",
        .dataTypeSpecific.className = NULL,
        .number = GetSupportedLanguagesRequest_FieldNumber_Model,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GetSupportedLanguagesRequest__storage_, model),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "parent",
        .dataTypeSpecific.className = NULL,
        .number = GetSupportedLanguagesRequest_FieldNumber_Parent,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetSupportedLanguagesRequest__storage_, parent),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetSupportedLanguagesRequest class]
                                     rootClass:[TranslationServiceRoot class]
                                          file:TranslationServiceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetSupportedLanguagesRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SupportedLanguages

@implementation SupportedLanguages

@dynamic languagesArray, languagesArray_Count;

typedef struct SupportedLanguages__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *languagesArray;
} SupportedLanguages__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "languagesArray",
        .dataTypeSpecific.className = GPBStringifySymbol(SupportedLanguage),
        .number = SupportedLanguages_FieldNumber_LanguagesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(SupportedLanguages__storage_, languagesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SupportedLanguages class]
                                     rootClass:[TranslationServiceRoot class]
                                          file:TranslationServiceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SupportedLanguages__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SupportedLanguage

@implementation SupportedLanguage

@dynamic languageCode;
@dynamic displayName;
@dynamic supportSource;
@dynamic supportTarget;

typedef struct SupportedLanguage__storage_ {
  uint32_t _has_storage_[1];
  NSString *languageCode;
  NSString *displayName;
} SupportedLanguage__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "languageCode",
        .dataTypeSpecific.className = NULL,
        .number = SupportedLanguage_FieldNumber_LanguageCode,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SupportedLanguage__storage_, languageCode),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "displayName",
        .dataTypeSpecific.className = NULL,
        .number = SupportedLanguage_FieldNumber_DisplayName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SupportedLanguage__storage_, displayName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "supportSource",
        .dataTypeSpecific.className = NULL,
        .number = SupportedLanguage_FieldNumber_SupportSource,
        .hasIndex = 2,
        .offset = 3,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "supportTarget",
        .dataTypeSpecific.className = NULL,
        .number = SupportedLanguage_FieldNumber_SupportTarget,
        .hasIndex = 4,
        .offset = 5,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SupportedLanguage class]
                                     rootClass:[TranslationServiceRoot class]
                                          file:TranslationServiceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SupportedLanguage__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GcsSource

@implementation GcsSource

@dynamic inputUri;

typedef struct GcsSource__storage_ {
  uint32_t _has_storage_[1];
  NSString *inputUri;
} GcsSource__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "inputUri",
        .dataTypeSpecific.className = NULL,
        .number = GcsSource_FieldNumber_InputUri,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GcsSource__storage_, inputUri),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GcsSource class]
                                     rootClass:[TranslationServiceRoot class]
                                          file:TranslationServiceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GcsSource__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - InputConfig

@implementation InputConfig

@dynamic sourceOneOfCase;
@dynamic mimeType;
@dynamic gcsSource;

typedef struct InputConfig__storage_ {
  uint32_t _has_storage_[2];
  NSString *mimeType;
  GcsSource *gcsSource;
} InputConfig__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "mimeType",
        .dataTypeSpecific.className = NULL,
        .number = InputConfig_FieldNumber_MimeType,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(InputConfig__storage_, mimeType),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "gcsSource",
        .dataTypeSpecific.className = GPBStringifySymbol(GcsSource),
        .number = InputConfig_FieldNumber_GcsSource,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(InputConfig__storage_, gcsSource),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[InputConfig class]
                                     rootClass:[TranslationServiceRoot class]
                                          file:TranslationServiceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(InputConfig__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    static const char *oneofs[] = {
      "source",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

void InputConfig_ClearSourceOneOfCase(InputConfig *message) {
  GPBDescriptor *descriptor = [message descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBMaybeClearOneof(message, oneof, -1, 0);
}
#pragma mark - GcsDestination

@implementation GcsDestination

@dynamic outputUriPrefix;

typedef struct GcsDestination__storage_ {
  uint32_t _has_storage_[1];
  NSString *outputUriPrefix;
} GcsDestination__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "outputUriPrefix",
        .dataTypeSpecific.className = NULL,
        .number = GcsDestination_FieldNumber_OutputUriPrefix,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GcsDestination__storage_, outputUriPrefix),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GcsDestination class]
                                     rootClass:[TranslationServiceRoot class]
                                          file:TranslationServiceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GcsDestination__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - OutputConfig

@implementation OutputConfig

@dynamic destinationOneOfCase;
@dynamic gcsDestination;

typedef struct OutputConfig__storage_ {
  uint32_t _has_storage_[2];
  GcsDestination *gcsDestination;
} OutputConfig__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "gcsDestination",
        .dataTypeSpecific.className = GPBStringifySymbol(GcsDestination),
        .number = OutputConfig_FieldNumber_GcsDestination,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(OutputConfig__storage_, gcsDestination),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[OutputConfig class]
                                     rootClass:[TranslationServiceRoot class]
                                          file:TranslationServiceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(OutputConfig__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    static const char *oneofs[] = {
      "destination",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

void OutputConfig_ClearDestinationOneOfCase(OutputConfig *message) {
  GPBDescriptor *descriptor = [message descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBMaybeClearOneof(message, oneof, -1, 0);
}
#pragma mark - BatchTranslateTextRequest

@implementation BatchTranslateTextRequest

@dynamic parent;
@dynamic sourceLanguageCode;
@dynamic targetLanguageCodesArray, targetLanguageCodesArray_Count;
@dynamic models, models_Count;
@dynamic inputConfigsArray, inputConfigsArray_Count;
@dynamic hasOutputConfig, outputConfig;
@dynamic glossaries, glossaries_Count;
@dynamic labels, labels_Count;

typedef struct BatchTranslateTextRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *parent;
  NSString *sourceLanguageCode;
  NSMutableArray *targetLanguageCodesArray;
  NSMutableDictionary *models;
  NSMutableArray *inputConfigsArray;
  OutputConfig *outputConfig;
  NSMutableDictionary *glossaries;
  NSMutableDictionary *labels;
} BatchTranslateTextRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "parent",
        .dataTypeSpecific.className = NULL,
        .number = BatchTranslateTextRequest_FieldNumber_Parent,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(BatchTranslateTextRequest__storage_, parent),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "sourceLanguageCode",
        .dataTypeSpecific.className = NULL,
        .number = BatchTranslateTextRequest_FieldNumber_SourceLanguageCode,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(BatchTranslateTextRequest__storage_, sourceLanguageCode),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "targetLanguageCodesArray",
        .dataTypeSpecific.className = NULL,
        .number = BatchTranslateTextRequest_FieldNumber_TargetLanguageCodesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(BatchTranslateTextRequest__storage_, targetLanguageCodesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "models",
        .dataTypeSpecific.className = NULL,
        .number = BatchTranslateTextRequest_FieldNumber_Models,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(BatchTranslateTextRequest__storage_, models),
        .flags = GPBFieldMapKeyString,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "inputConfigsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(InputConfig),
        .number = BatchTranslateTextRequest_FieldNumber_InputConfigsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(BatchTranslateTextRequest__storage_, inputConfigsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "outputConfig",
        .dataTypeSpecific.className = GPBStringifySymbol(OutputConfig),
        .number = BatchTranslateTextRequest_FieldNumber_OutputConfig,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(BatchTranslateTextRequest__storage_, outputConfig),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "glossaries",
        .dataTypeSpecific.className = GPBStringifySymbol(TranslateTextGlossaryConfig),
        .number = BatchTranslateTextRequest_FieldNumber_Glossaries,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(BatchTranslateTextRequest__storage_, glossaries),
        .flags = GPBFieldMapKeyString,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "labels",
        .dataTypeSpecific.className = NULL,
        .number = BatchTranslateTextRequest_FieldNumber_Labels,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(BatchTranslateTextRequest__storage_, labels),
        .flags = GPBFieldMapKeyString,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[BatchTranslateTextRequest class]
                                     rootClass:[TranslationServiceRoot class]
                                          file:TranslationServiceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(BatchTranslateTextRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - BatchTranslateMetadata

@implementation BatchTranslateMetadata

@dynamic state;
@dynamic translatedCharacters;
@dynamic failedCharacters;
@dynamic totalCharacters;
@dynamic hasSubmitTime, submitTime;

typedef struct BatchTranslateMetadata__storage_ {
  uint32_t _has_storage_[1];
  BatchTranslateMetadata_State state;
  GPBTimestamp *submitTime;
  int64_t translatedCharacters;
  int64_t failedCharacters;
  int64_t totalCharacters;
} BatchTranslateMetadata__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "state",
        .dataTypeSpecific.enumDescFunc = BatchTranslateMetadata_State_EnumDescriptor,
        .number = BatchTranslateMetadata_FieldNumber_State,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(BatchTranslateMetadata__storage_, state),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "translatedCharacters",
        .dataTypeSpecific.className = NULL,
        .number = BatchTranslateMetadata_FieldNumber_TranslatedCharacters,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(BatchTranslateMetadata__storage_, translatedCharacters),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "failedCharacters",
        .dataTypeSpecific.className = NULL,
        .number = BatchTranslateMetadata_FieldNumber_FailedCharacters,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(BatchTranslateMetadata__storage_, failedCharacters),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "totalCharacters",
        .dataTypeSpecific.className = NULL,
        .number = BatchTranslateMetadata_FieldNumber_TotalCharacters,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(BatchTranslateMetadata__storage_, totalCharacters),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "submitTime",
        .dataTypeSpecific.className = GPBStringifySymbol(GPBTimestamp),
        .number = BatchTranslateMetadata_FieldNumber_SubmitTime,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(BatchTranslateMetadata__storage_, submitTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[BatchTranslateMetadata class]
                                     rootClass:[TranslationServiceRoot class]
                                          file:TranslationServiceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(BatchTranslateMetadata__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t BatchTranslateMetadata_State_RawValue(BatchTranslateMetadata *message) {
  GPBDescriptor *descriptor = [BatchTranslateMetadata descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:BatchTranslateMetadata_FieldNumber_State];
  return GPBGetMessageInt32Field(message, field);
}

void SetBatchTranslateMetadata_State_RawValue(BatchTranslateMetadata *message, int32_t value) {
  GPBDescriptor *descriptor = [BatchTranslateMetadata descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:BatchTranslateMetadata_FieldNumber_State];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Enum BatchTranslateMetadata_State

GPBEnumDescriptor *BatchTranslateMetadata_State_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "StateUnspecified\000Running\000Succeeded\000Faile"
        "d\000Cancelling\000Cancelled\000";
    static const int32_t values[] = {
        BatchTranslateMetadata_State_StateUnspecified,
        BatchTranslateMetadata_State_Running,
        BatchTranslateMetadata_State_Succeeded,
        BatchTranslateMetadata_State_Failed,
        BatchTranslateMetadata_State_Cancelling,
        BatchTranslateMetadata_State_Cancelled,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(BatchTranslateMetadata_State)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:BatchTranslateMetadata_State_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL BatchTranslateMetadata_State_IsValidValue(int32_t value__) {
  switch (value__) {
    case BatchTranslateMetadata_State_StateUnspecified:
    case BatchTranslateMetadata_State_Running:
    case BatchTranslateMetadata_State_Succeeded:
    case BatchTranslateMetadata_State_Failed:
    case BatchTranslateMetadata_State_Cancelling:
    case BatchTranslateMetadata_State_Cancelled:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - BatchTranslateResponse

@implementation BatchTranslateResponse

@dynamic totalCharacters;
@dynamic translatedCharacters;
@dynamic failedCharacters;
@dynamic hasSubmitTime, submitTime;
@dynamic hasEndTime, endTime;

typedef struct BatchTranslateResponse__storage_ {
  uint32_t _has_storage_[1];
  GPBTimestamp *submitTime;
  GPBTimestamp *endTime;
  int64_t totalCharacters;
  int64_t translatedCharacters;
  int64_t failedCharacters;
} BatchTranslateResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "totalCharacters",
        .dataTypeSpecific.className = NULL,
        .number = BatchTranslateResponse_FieldNumber_TotalCharacters,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(BatchTranslateResponse__storage_, totalCharacters),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "translatedCharacters",
        .dataTypeSpecific.className = NULL,
        .number = BatchTranslateResponse_FieldNumber_TranslatedCharacters,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(BatchTranslateResponse__storage_, translatedCharacters),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "failedCharacters",
        .dataTypeSpecific.className = NULL,
        .number = BatchTranslateResponse_FieldNumber_FailedCharacters,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(BatchTranslateResponse__storage_, failedCharacters),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "submitTime",
        .dataTypeSpecific.className = GPBStringifySymbol(GPBTimestamp),
        .number = BatchTranslateResponse_FieldNumber_SubmitTime,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(BatchTranslateResponse__storage_, submitTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "endTime",
        .dataTypeSpecific.className = GPBStringifySymbol(GPBTimestamp),
        .number = BatchTranslateResponse_FieldNumber_EndTime,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(BatchTranslateResponse__storage_, endTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[BatchTranslateResponse class]
                                     rootClass:[TranslationServiceRoot class]
                                          file:TranslationServiceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(BatchTranslateResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GlossaryInputConfig

@implementation GlossaryInputConfig

@dynamic sourceOneOfCase;
@dynamic gcsSource;

typedef struct GlossaryInputConfig__storage_ {
  uint32_t _has_storage_[2];
  GcsSource *gcsSource;
} GlossaryInputConfig__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "gcsSource",
        .dataTypeSpecific.className = GPBStringifySymbol(GcsSource),
        .number = GlossaryInputConfig_FieldNumber_GcsSource,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(GlossaryInputConfig__storage_, gcsSource),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GlossaryInputConfig class]
                                     rootClass:[TranslationServiceRoot class]
                                          file:TranslationServiceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GlossaryInputConfig__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    static const char *oneofs[] = {
      "source",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

void GlossaryInputConfig_ClearSourceOneOfCase(GlossaryInputConfig *message) {
  GPBDescriptor *descriptor = [message descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBMaybeClearOneof(message, oneof, -1, 0);
}
#pragma mark - Glossary

@implementation Glossary

@dynamic languagesOneOfCase;
@dynamic name;
@dynamic languagePair;
@dynamic languageCodesSet;
@dynamic hasInputConfig, inputConfig;
@dynamic entryCount;
@dynamic hasSubmitTime, submitTime;
@dynamic hasEndTime, endTime;

typedef struct Glossary__storage_ {
  uint32_t _has_storage_[2];
  int32_t entryCount;
  NSString *name;
  Glossary_LanguageCodePair *languagePair;
  Glossary_LanguageCodesSet *languageCodesSet;
  GlossaryInputConfig *inputConfig;
  GPBTimestamp *submitTime;
  GPBTimestamp *endTime;
} Glossary__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = Glossary_FieldNumber_Name,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Glossary__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "languagePair",
        .dataTypeSpecific.className = GPBStringifySymbol(Glossary_LanguageCodePair),
        .number = Glossary_FieldNumber_LanguagePair,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Glossary__storage_, languagePair),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "languageCodesSet",
        .dataTypeSpecific.className = GPBStringifySymbol(Glossary_LanguageCodesSet),
        .number = Glossary_FieldNumber_LanguageCodesSet,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Glossary__storage_, languageCodesSet),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "inputConfig",
        .dataTypeSpecific.className = GPBStringifySymbol(GlossaryInputConfig),
        .number = Glossary_FieldNumber_InputConfig,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Glossary__storage_, inputConfig),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "entryCount",
        .dataTypeSpecific.className = NULL,
        .number = Glossary_FieldNumber_EntryCount,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Glossary__storage_, entryCount),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "submitTime",
        .dataTypeSpecific.className = GPBStringifySymbol(GPBTimestamp),
        .number = Glossary_FieldNumber_SubmitTime,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(Glossary__storage_, submitTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "endTime",
        .dataTypeSpecific.className = GPBStringifySymbol(GPBTimestamp),
        .number = Glossary_FieldNumber_EndTime,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(Glossary__storage_, endTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Glossary class]
                                     rootClass:[TranslationServiceRoot class]
                                          file:TranslationServiceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Glossary__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    static const char *oneofs[] = {
      "languages",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

void Glossary_ClearLanguagesOneOfCase(Glossary *message) {
  GPBDescriptor *descriptor = [message descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBMaybeClearOneof(message, oneof, -1, 0);
}
#pragma mark - Glossary_LanguageCodePair

@implementation Glossary_LanguageCodePair

@dynamic sourceLanguageCode;
@dynamic targetLanguageCode;

typedef struct Glossary_LanguageCodePair__storage_ {
  uint32_t _has_storage_[1];
  NSString *sourceLanguageCode;
  NSString *targetLanguageCode;
} Glossary_LanguageCodePair__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sourceLanguageCode",
        .dataTypeSpecific.className = NULL,
        .number = Glossary_LanguageCodePair_FieldNumber_SourceLanguageCode,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Glossary_LanguageCodePair__storage_, sourceLanguageCode),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "targetLanguageCode",
        .dataTypeSpecific.className = NULL,
        .number = Glossary_LanguageCodePair_FieldNumber_TargetLanguageCode,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Glossary_LanguageCodePair__storage_, targetLanguageCode),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Glossary_LanguageCodePair class]
                                     rootClass:[TranslationServiceRoot class]
                                          file:TranslationServiceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Glossary_LanguageCodePair__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(Glossary)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Glossary_LanguageCodesSet

@implementation Glossary_LanguageCodesSet

@dynamic languageCodesArray, languageCodesArray_Count;

typedef struct Glossary_LanguageCodesSet__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *languageCodesArray;
} Glossary_LanguageCodesSet__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "languageCodesArray",
        .dataTypeSpecific.className = NULL,
        .number = Glossary_LanguageCodesSet_FieldNumber_LanguageCodesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(Glossary_LanguageCodesSet__storage_, languageCodesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Glossary_LanguageCodesSet class]
                                     rootClass:[TranslationServiceRoot class]
                                          file:TranslationServiceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Glossary_LanguageCodesSet__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(Glossary)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - CreateGlossaryRequest

@implementation CreateGlossaryRequest

@dynamic parent;
@dynamic hasGlossary, glossary;

typedef struct CreateGlossaryRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *parent;
  Glossary *glossary;
} CreateGlossaryRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "parent",
        .dataTypeSpecific.className = NULL,
        .number = CreateGlossaryRequest_FieldNumber_Parent,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CreateGlossaryRequest__storage_, parent),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "glossary",
        .dataTypeSpecific.className = GPBStringifySymbol(Glossary),
        .number = CreateGlossaryRequest_FieldNumber_Glossary,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(CreateGlossaryRequest__storage_, glossary),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CreateGlossaryRequest class]
                                     rootClass:[TranslationServiceRoot class]
                                          file:TranslationServiceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CreateGlossaryRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetGlossaryRequest

@implementation GetGlossaryRequest

@dynamic name;

typedef struct GetGlossaryRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *name;
} GetGlossaryRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = GetGlossaryRequest_FieldNumber_Name,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetGlossaryRequest__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetGlossaryRequest class]
                                     rootClass:[TranslationServiceRoot class]
                                          file:TranslationServiceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetGlossaryRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DeleteGlossaryRequest

@implementation DeleteGlossaryRequest

@dynamic name;

typedef struct DeleteGlossaryRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *name;
} DeleteGlossaryRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = DeleteGlossaryRequest_FieldNumber_Name,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DeleteGlossaryRequest__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DeleteGlossaryRequest class]
                                     rootClass:[TranslationServiceRoot class]
                                          file:TranslationServiceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DeleteGlossaryRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ListGlossariesRequest

@implementation ListGlossariesRequest

@dynamic parent;
@dynamic pageSize;
@dynamic pageToken;
@dynamic filter;

typedef struct ListGlossariesRequest__storage_ {
  uint32_t _has_storage_[1];
  int32_t pageSize;
  NSString *parent;
  NSString *pageToken;
  NSString *filter;
} ListGlossariesRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "parent",
        .dataTypeSpecific.className = NULL,
        .number = ListGlossariesRequest_FieldNumber_Parent,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ListGlossariesRequest__storage_, parent),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "pageSize",
        .dataTypeSpecific.className = NULL,
        .number = ListGlossariesRequest_FieldNumber_PageSize,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ListGlossariesRequest__storage_, pageSize),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "pageToken",
        .dataTypeSpecific.className = NULL,
        .number = ListGlossariesRequest_FieldNumber_PageToken,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ListGlossariesRequest__storage_, pageToken),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "filter",
        .dataTypeSpecific.className = NULL,
        .number = ListGlossariesRequest_FieldNumber_Filter,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(ListGlossariesRequest__storage_, filter),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ListGlossariesRequest class]
                                     rootClass:[TranslationServiceRoot class]
                                          file:TranslationServiceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ListGlossariesRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ListGlossariesResponse

@implementation ListGlossariesResponse

@dynamic glossariesArray, glossariesArray_Count;
@dynamic nextPageToken;

typedef struct ListGlossariesResponse__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *glossariesArray;
  NSString *nextPageToken;
} ListGlossariesResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "glossariesArray",
        .dataTypeSpecific.className = GPBStringifySymbol(Glossary),
        .number = ListGlossariesResponse_FieldNumber_GlossariesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ListGlossariesResponse__storage_, glossariesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "nextPageToken",
        .dataTypeSpecific.className = NULL,
        .number = ListGlossariesResponse_FieldNumber_NextPageToken,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ListGlossariesResponse__storage_, nextPageToken),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ListGlossariesResponse class]
                                     rootClass:[TranslationServiceRoot class]
                                          file:TranslationServiceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ListGlossariesResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - CreateGlossaryMetadata

@implementation CreateGlossaryMetadata

@dynamic name;
@dynamic state;
@dynamic hasSubmitTime, submitTime;

typedef struct CreateGlossaryMetadata__storage_ {
  uint32_t _has_storage_[1];
  CreateGlossaryMetadata_State state;
  NSString *name;
  GPBTimestamp *submitTime;
} CreateGlossaryMetadata__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = CreateGlossaryMetadata_FieldNumber_Name,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CreateGlossaryMetadata__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "state",
        .dataTypeSpecific.enumDescFunc = CreateGlossaryMetadata_State_EnumDescriptor,
        .number = CreateGlossaryMetadata_FieldNumber_State,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(CreateGlossaryMetadata__storage_, state),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "submitTime",
        .dataTypeSpecific.className = GPBStringifySymbol(GPBTimestamp),
        .number = CreateGlossaryMetadata_FieldNumber_SubmitTime,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(CreateGlossaryMetadata__storage_, submitTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CreateGlossaryMetadata class]
                                     rootClass:[TranslationServiceRoot class]
                                          file:TranslationServiceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CreateGlossaryMetadata__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t CreateGlossaryMetadata_State_RawValue(CreateGlossaryMetadata *message) {
  GPBDescriptor *descriptor = [CreateGlossaryMetadata descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:CreateGlossaryMetadata_FieldNumber_State];
  return GPBGetMessageInt32Field(message, field);
}

void SetCreateGlossaryMetadata_State_RawValue(CreateGlossaryMetadata *message, int32_t value) {
  GPBDescriptor *descriptor = [CreateGlossaryMetadata descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:CreateGlossaryMetadata_FieldNumber_State];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Enum CreateGlossaryMetadata_State

GPBEnumDescriptor *CreateGlossaryMetadata_State_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "StateUnspecified\000Running\000Succeeded\000Faile"
        "d\000Cancelling\000Cancelled\000";
    static const int32_t values[] = {
        CreateGlossaryMetadata_State_StateUnspecified,
        CreateGlossaryMetadata_State_Running,
        CreateGlossaryMetadata_State_Succeeded,
        CreateGlossaryMetadata_State_Failed,
        CreateGlossaryMetadata_State_Cancelling,
        CreateGlossaryMetadata_State_Cancelled,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(CreateGlossaryMetadata_State)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:CreateGlossaryMetadata_State_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL CreateGlossaryMetadata_State_IsValidValue(int32_t value__) {
  switch (value__) {
    case CreateGlossaryMetadata_State_StateUnspecified:
    case CreateGlossaryMetadata_State_Running:
    case CreateGlossaryMetadata_State_Succeeded:
    case CreateGlossaryMetadata_State_Failed:
    case CreateGlossaryMetadata_State_Cancelling:
    case CreateGlossaryMetadata_State_Cancelled:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - DeleteGlossaryMetadata

@implementation DeleteGlossaryMetadata

@dynamic name;
@dynamic state;
@dynamic hasSubmitTime, submitTime;

typedef struct DeleteGlossaryMetadata__storage_ {
  uint32_t _has_storage_[1];
  DeleteGlossaryMetadata_State state;
  NSString *name;
  GPBTimestamp *submitTime;
} DeleteGlossaryMetadata__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = DeleteGlossaryMetadata_FieldNumber_Name,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DeleteGlossaryMetadata__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "state",
        .dataTypeSpecific.enumDescFunc = DeleteGlossaryMetadata_State_EnumDescriptor,
        .number = DeleteGlossaryMetadata_FieldNumber_State,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(DeleteGlossaryMetadata__storage_, state),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "submitTime",
        .dataTypeSpecific.className = GPBStringifySymbol(GPBTimestamp),
        .number = DeleteGlossaryMetadata_FieldNumber_SubmitTime,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(DeleteGlossaryMetadata__storage_, submitTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DeleteGlossaryMetadata class]
                                     rootClass:[TranslationServiceRoot class]
                                          file:TranslationServiceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DeleteGlossaryMetadata__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t DeleteGlossaryMetadata_State_RawValue(DeleteGlossaryMetadata *message) {
  GPBDescriptor *descriptor = [DeleteGlossaryMetadata descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:DeleteGlossaryMetadata_FieldNumber_State];
  return GPBGetMessageInt32Field(message, field);
}

void SetDeleteGlossaryMetadata_State_RawValue(DeleteGlossaryMetadata *message, int32_t value) {
  GPBDescriptor *descriptor = [DeleteGlossaryMetadata descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:DeleteGlossaryMetadata_FieldNumber_State];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Enum DeleteGlossaryMetadata_State

GPBEnumDescriptor *DeleteGlossaryMetadata_State_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "StateUnspecified\000Running\000Succeeded\000Faile"
        "d\000Cancelling\000Cancelled\000";
    static const int32_t values[] = {
        DeleteGlossaryMetadata_State_StateUnspecified,
        DeleteGlossaryMetadata_State_Running,
        DeleteGlossaryMetadata_State_Succeeded,
        DeleteGlossaryMetadata_State_Failed,
        DeleteGlossaryMetadata_State_Cancelling,
        DeleteGlossaryMetadata_State_Cancelled,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(DeleteGlossaryMetadata_State)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:DeleteGlossaryMetadata_State_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL DeleteGlossaryMetadata_State_IsValidValue(int32_t value__) {
  switch (value__) {
    case DeleteGlossaryMetadata_State_StateUnspecified:
    case DeleteGlossaryMetadata_State_Running:
    case DeleteGlossaryMetadata_State_Succeeded:
    case DeleteGlossaryMetadata_State_Failed:
    case DeleteGlossaryMetadata_State_Cancelling:
    case DeleteGlossaryMetadata_State_Cancelled:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - DeleteGlossaryResponse

@implementation DeleteGlossaryResponse

@dynamic name;
@dynamic hasSubmitTime, submitTime;
@dynamic hasEndTime, endTime;

typedef struct DeleteGlossaryResponse__storage_ {
  uint32_t _has_storage_[1];
  NSString *name;
  GPBTimestamp *submitTime;
  GPBTimestamp *endTime;
} DeleteGlossaryResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = DeleteGlossaryResponse_FieldNumber_Name,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DeleteGlossaryResponse__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "submitTime",
        .dataTypeSpecific.className = GPBStringifySymbol(GPBTimestamp),
        .number = DeleteGlossaryResponse_FieldNumber_SubmitTime,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(DeleteGlossaryResponse__storage_, submitTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "endTime",
        .dataTypeSpecific.className = GPBStringifySymbol(GPBTimestamp),
        .number = DeleteGlossaryResponse_FieldNumber_EndTime,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(DeleteGlossaryResponse__storage_, endTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DeleteGlossaryResponse class]
                                     rootClass:[TranslationServiceRoot class]
                                          file:TranslationServiceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DeleteGlossaryResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
