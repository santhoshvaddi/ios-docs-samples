// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/language/v1beta1/language_service.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import <stdatomic.h>

#import "google/cloud/language/v1beta1/LanguageService.pbobjc.h"
#import <googleapis/Annotations.pbobjc.h>
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdirect-ivar-access"

#pragma mark - LanguageServiceRoot

@implementation LanguageServiceRoot

+ (GPBExtensionRegistry*)extensionRegistry {
  // This is called by +initialize so there is no need to worry
  // about thread safety and initialization of registry.
  static GPBExtensionRegistry* registry = nil;
  if (!registry) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    registry = [[GPBExtensionRegistry alloc] init];
    // Merge in the imports (direct or indirect) that defined extensions.
    [registry addExtensions:[AnnotationsRoot extensionRegistry]];
  }
  return registry;
}

@end

#pragma mark - LanguageServiceRoot_FileDescriptor

static GPBFileDescriptor *LanguageServiceRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"google.cloud.language.v1beta1"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Enum EncodingType

GPBEnumDescriptor *EncodingType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "None\000Utf8\000Utf16\000Utf32\000";
    static const int32_t values[] = {
        EncodingType_None,
        EncodingType_Utf8,
        EncodingType_Utf16,
        EncodingType_Utf32,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(EncodingType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:EncodingType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL EncodingType_IsValidValue(int32_t value__) {
  switch (value__) {
    case EncodingType_None:
    case EncodingType_Utf8:
    case EncodingType_Utf16:
    case EncodingType_Utf32:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Document

@implementation Document

@dynamic sourceOneOfCase;
@dynamic type;
@dynamic content;
@dynamic gcsContentUri;
@dynamic language;

typedef struct Document__storage_ {
  uint32_t _has_storage_[2];
  Document_Type type;
  NSString *content;
  NSString *gcsContentUri;
  NSString *language;
} Document__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = Document_Type_EnumDescriptor,
        .number = Document_FieldNumber_Type,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Document__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "content",
        .dataTypeSpecific.className = NULL,
        .number = Document_FieldNumber_Content,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Document__storage_, content),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "gcsContentUri",
        .dataTypeSpecific.className = NULL,
        .number = Document_FieldNumber_GcsContentUri,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Document__storage_, gcsContentUri),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "language",
        .dataTypeSpecific.className = NULL,
        .number = Document_FieldNumber_Language,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Document__storage_, language),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Document class]
                                     rootClass:[LanguageServiceRoot class]
                                          file:LanguageServiceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Document__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    static const char *oneofs[] = {
      "source",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t Document_Type_RawValue(Document *message) {
  GPBDescriptor *descriptor = [Document descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:Document_FieldNumber_Type];
  return GPBGetMessageInt32Field(message, field);
}

void SetDocument_Type_RawValue(Document *message, int32_t value) {
  GPBDescriptor *descriptor = [Document descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:Document_FieldNumber_Type];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

void Document_ClearSourceOneOfCase(Document *message) {
  GPBDescriptor *descriptor = [message descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBMaybeClearOneof(message, oneof, -1, 0);
}
#pragma mark - Enum Document_Type

GPBEnumDescriptor *Document_Type_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "TypeUnspecified\000PlainText\000Html\000";
    static const int32_t values[] = {
        Document_Type_TypeUnspecified,
        Document_Type_PlainText,
        Document_Type_Html,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(Document_Type)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:Document_Type_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL Document_Type_IsValidValue(int32_t value__) {
  switch (value__) {
    case Document_Type_TypeUnspecified:
    case Document_Type_PlainText:
    case Document_Type_Html:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Sentence

@implementation Sentence

@dynamic hasText, text;
@dynamic hasSentiment, sentiment;

typedef struct Sentence__storage_ {
  uint32_t _has_storage_[1];
  TextSpan *text;
  Sentiment *sentiment;
} Sentence__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "text",
        .dataTypeSpecific.className = GPBStringifySymbol(TextSpan),
        .number = Sentence_FieldNumber_Text,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Sentence__storage_, text),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "sentiment",
        .dataTypeSpecific.className = GPBStringifySymbol(Sentiment),
        .number = Sentence_FieldNumber_Sentiment,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Sentence__storage_, sentiment),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Sentence class]
                                     rootClass:[LanguageServiceRoot class]
                                          file:LanguageServiceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Sentence__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Entity

@implementation Entity

@dynamic name;
@dynamic type;
@dynamic metadata, metadata_Count;
@dynamic salience;
@dynamic mentionsArray, mentionsArray_Count;

typedef struct Entity__storage_ {
  uint32_t _has_storage_[1];
  Entity_Type type;
  float salience;
  NSString *name;
  NSMutableDictionary *metadata;
  NSMutableArray *mentionsArray;
} Entity__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = Entity_FieldNumber_Name,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Entity__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = Entity_Type_EnumDescriptor,
        .number = Entity_FieldNumber_Type,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Entity__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "metadata",
        .dataTypeSpecific.className = NULL,
        .number = Entity_FieldNumber_Metadata,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(Entity__storage_, metadata),
        .flags = GPBFieldMapKeyString,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "salience",
        .dataTypeSpecific.className = NULL,
        .number = Entity_FieldNumber_Salience,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Entity__storage_, salience),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "mentionsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(EntityMention),
        .number = Entity_FieldNumber_MentionsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(Entity__storage_, mentionsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Entity class]
                                     rootClass:[LanguageServiceRoot class]
                                          file:LanguageServiceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Entity__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t Entity_Type_RawValue(Entity *message) {
  GPBDescriptor *descriptor = [Entity descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:Entity_FieldNumber_Type];
  return GPBGetMessageInt32Field(message, field);
}

void SetEntity_Type_RawValue(Entity *message, int32_t value) {
  GPBDescriptor *descriptor = [Entity descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:Entity_FieldNumber_Type];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Enum Entity_Type

GPBEnumDescriptor *Entity_Type_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "Unknown\000Person\000Location\000Organization\000Eve"
        "nt\000WorkOfArt\000ConsumerGood\000Other\000";
    static const int32_t values[] = {
        Entity_Type_Unknown,
        Entity_Type_Person,
        Entity_Type_Location,
        Entity_Type_Organization,
        Entity_Type_Event,
        Entity_Type_WorkOfArt,
        Entity_Type_ConsumerGood,
        Entity_Type_Other,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(Entity_Type)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:Entity_Type_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL Entity_Type_IsValidValue(int32_t value__) {
  switch (value__) {
    case Entity_Type_Unknown:
    case Entity_Type_Person:
    case Entity_Type_Location:
    case Entity_Type_Organization:
    case Entity_Type_Event:
    case Entity_Type_WorkOfArt:
    case Entity_Type_ConsumerGood:
    case Entity_Type_Other:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Token

@implementation Token

@dynamic hasText, text;
@dynamic hasPartOfSpeech, partOfSpeech;
@dynamic hasDependencyEdge, dependencyEdge;
@dynamic lemma;

typedef struct Token__storage_ {
  uint32_t _has_storage_[1];
  TextSpan *text;
  PartOfSpeech *partOfSpeech;
  DependencyEdge *dependencyEdge;
  NSString *lemma;
} Token__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "text",
        .dataTypeSpecific.className = GPBStringifySymbol(TextSpan),
        .number = Token_FieldNumber_Text,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Token__storage_, text),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "partOfSpeech",
        .dataTypeSpecific.className = GPBStringifySymbol(PartOfSpeech),
        .number = Token_FieldNumber_PartOfSpeech,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Token__storage_, partOfSpeech),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "dependencyEdge",
        .dataTypeSpecific.className = GPBStringifySymbol(DependencyEdge),
        .number = Token_FieldNumber_DependencyEdge,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Token__storage_, dependencyEdge),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "lemma",
        .dataTypeSpecific.className = NULL,
        .number = Token_FieldNumber_Lemma,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(Token__storage_, lemma),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Token class]
                                     rootClass:[LanguageServiceRoot class]
                                          file:LanguageServiceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Token__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Sentiment

@implementation Sentiment

@dynamic polarity;
@dynamic magnitude;
@dynamic score;

typedef struct Sentiment__storage_ {
  uint32_t _has_storage_[1];
  float polarity;
  float magnitude;
  float score;
} Sentiment__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "polarity",
        .dataTypeSpecific.className = NULL,
        .number = Sentiment_FieldNumber_Polarity,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Sentiment__storage_, polarity),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "magnitude",
        .dataTypeSpecific.className = NULL,
        .number = Sentiment_FieldNumber_Magnitude,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Sentiment__storage_, magnitude),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "score",
        .dataTypeSpecific.className = NULL,
        .number = Sentiment_FieldNumber_Score,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Sentiment__storage_, score),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeFloat,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Sentiment class]
                                     rootClass:[LanguageServiceRoot class]
                                          file:LanguageServiceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Sentiment__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PartOfSpeech

@implementation PartOfSpeech

@dynamic tag;
@dynamic aspect;
@dynamic case_p;
@dynamic form;
@dynamic gender;
@dynamic mood;
@dynamic number;
@dynamic person;
@dynamic proper;
@dynamic reciprocity;
@dynamic tense;
@dynamic voice;

typedef struct PartOfSpeech__storage_ {
  uint32_t _has_storage_[1];
  PartOfSpeech_Tag tag;
  PartOfSpeech_Aspect aspect;
  PartOfSpeech_Case case_p;
  PartOfSpeech_Form form;
  PartOfSpeech_Gender gender;
  PartOfSpeech_Mood mood;
  PartOfSpeech_Number number;
  PartOfSpeech_Person person;
  PartOfSpeech_Proper proper;
  PartOfSpeech_Reciprocity reciprocity;
  PartOfSpeech_Tense tense;
  PartOfSpeech_Voice voice;
} PartOfSpeech__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "tag",
        .dataTypeSpecific.enumDescFunc = PartOfSpeech_Tag_EnumDescriptor,
        .number = PartOfSpeech_FieldNumber_Tag,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PartOfSpeech__storage_, tag),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "aspect",
        .dataTypeSpecific.enumDescFunc = PartOfSpeech_Aspect_EnumDescriptor,
        .number = PartOfSpeech_FieldNumber_Aspect,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PartOfSpeech__storage_, aspect),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "case_p",
        .dataTypeSpecific.enumDescFunc = PartOfSpeech_Case_EnumDescriptor,
        .number = PartOfSpeech_FieldNumber_Case_p,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PartOfSpeech__storage_, case_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "form",
        .dataTypeSpecific.enumDescFunc = PartOfSpeech_Form_EnumDescriptor,
        .number = PartOfSpeech_FieldNumber_Form,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PartOfSpeech__storage_, form),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "gender",
        .dataTypeSpecific.enumDescFunc = PartOfSpeech_Gender_EnumDescriptor,
        .number = PartOfSpeech_FieldNumber_Gender,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PartOfSpeech__storage_, gender),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "mood",
        .dataTypeSpecific.enumDescFunc = PartOfSpeech_Mood_EnumDescriptor,
        .number = PartOfSpeech_FieldNumber_Mood,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PartOfSpeech__storage_, mood),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "number",
        .dataTypeSpecific.enumDescFunc = PartOfSpeech_Number_EnumDescriptor,
        .number = PartOfSpeech_FieldNumber_Number,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PartOfSpeech__storage_, number),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "person",
        .dataTypeSpecific.enumDescFunc = PartOfSpeech_Person_EnumDescriptor,
        .number = PartOfSpeech_FieldNumber_Person,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PartOfSpeech__storage_, person),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "proper",
        .dataTypeSpecific.enumDescFunc = PartOfSpeech_Proper_EnumDescriptor,
        .number = PartOfSpeech_FieldNumber_Proper,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PartOfSpeech__storage_, proper),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "reciprocity",
        .dataTypeSpecific.enumDescFunc = PartOfSpeech_Reciprocity_EnumDescriptor,
        .number = PartOfSpeech_FieldNumber_Reciprocity,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(PartOfSpeech__storage_, reciprocity),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "tense",
        .dataTypeSpecific.enumDescFunc = PartOfSpeech_Tense_EnumDescriptor,
        .number = PartOfSpeech_FieldNumber_Tense,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(PartOfSpeech__storage_, tense),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "voice",
        .dataTypeSpecific.enumDescFunc = PartOfSpeech_Voice_EnumDescriptor,
        .number = PartOfSpeech_FieldNumber_Voice,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(PartOfSpeech__storage_, voice),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PartOfSpeech class]
                                     rootClass:[LanguageServiceRoot class]
                                          file:LanguageServiceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PartOfSpeech__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PartOfSpeech_Tag_RawValue(PartOfSpeech *message) {
  GPBDescriptor *descriptor = [PartOfSpeech descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PartOfSpeech_FieldNumber_Tag];
  return GPBGetMessageInt32Field(message, field);
}

void SetPartOfSpeech_Tag_RawValue(PartOfSpeech *message, int32_t value) {
  GPBDescriptor *descriptor = [PartOfSpeech descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PartOfSpeech_FieldNumber_Tag];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PartOfSpeech_Aspect_RawValue(PartOfSpeech *message) {
  GPBDescriptor *descriptor = [PartOfSpeech descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PartOfSpeech_FieldNumber_Aspect];
  return GPBGetMessageInt32Field(message, field);
}

void SetPartOfSpeech_Aspect_RawValue(PartOfSpeech *message, int32_t value) {
  GPBDescriptor *descriptor = [PartOfSpeech descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PartOfSpeech_FieldNumber_Aspect];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PartOfSpeech_Case_p_RawValue(PartOfSpeech *message) {
  GPBDescriptor *descriptor = [PartOfSpeech descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PartOfSpeech_FieldNumber_Case_p];
  return GPBGetMessageInt32Field(message, field);
}

void SetPartOfSpeech_Case_p_RawValue(PartOfSpeech *message, int32_t value) {
  GPBDescriptor *descriptor = [PartOfSpeech descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PartOfSpeech_FieldNumber_Case_p];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PartOfSpeech_Form_RawValue(PartOfSpeech *message) {
  GPBDescriptor *descriptor = [PartOfSpeech descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PartOfSpeech_FieldNumber_Form];
  return GPBGetMessageInt32Field(message, field);
}

void SetPartOfSpeech_Form_RawValue(PartOfSpeech *message, int32_t value) {
  GPBDescriptor *descriptor = [PartOfSpeech descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PartOfSpeech_FieldNumber_Form];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PartOfSpeech_Gender_RawValue(PartOfSpeech *message) {
  GPBDescriptor *descriptor = [PartOfSpeech descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PartOfSpeech_FieldNumber_Gender];
  return GPBGetMessageInt32Field(message, field);
}

void SetPartOfSpeech_Gender_RawValue(PartOfSpeech *message, int32_t value) {
  GPBDescriptor *descriptor = [PartOfSpeech descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PartOfSpeech_FieldNumber_Gender];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PartOfSpeech_Mood_RawValue(PartOfSpeech *message) {
  GPBDescriptor *descriptor = [PartOfSpeech descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PartOfSpeech_FieldNumber_Mood];
  return GPBGetMessageInt32Field(message, field);
}

void SetPartOfSpeech_Mood_RawValue(PartOfSpeech *message, int32_t value) {
  GPBDescriptor *descriptor = [PartOfSpeech descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PartOfSpeech_FieldNumber_Mood];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PartOfSpeech_Number_RawValue(PartOfSpeech *message) {
  GPBDescriptor *descriptor = [PartOfSpeech descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PartOfSpeech_FieldNumber_Number];
  return GPBGetMessageInt32Field(message, field);
}

void SetPartOfSpeech_Number_RawValue(PartOfSpeech *message, int32_t value) {
  GPBDescriptor *descriptor = [PartOfSpeech descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PartOfSpeech_FieldNumber_Number];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PartOfSpeech_Person_RawValue(PartOfSpeech *message) {
  GPBDescriptor *descriptor = [PartOfSpeech descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PartOfSpeech_FieldNumber_Person];
  return GPBGetMessageInt32Field(message, field);
}

void SetPartOfSpeech_Person_RawValue(PartOfSpeech *message, int32_t value) {
  GPBDescriptor *descriptor = [PartOfSpeech descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PartOfSpeech_FieldNumber_Person];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PartOfSpeech_Proper_RawValue(PartOfSpeech *message) {
  GPBDescriptor *descriptor = [PartOfSpeech descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PartOfSpeech_FieldNumber_Proper];
  return GPBGetMessageInt32Field(message, field);
}

void SetPartOfSpeech_Proper_RawValue(PartOfSpeech *message, int32_t value) {
  GPBDescriptor *descriptor = [PartOfSpeech descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PartOfSpeech_FieldNumber_Proper];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PartOfSpeech_Reciprocity_RawValue(PartOfSpeech *message) {
  GPBDescriptor *descriptor = [PartOfSpeech descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PartOfSpeech_FieldNumber_Reciprocity];
  return GPBGetMessageInt32Field(message, field);
}

void SetPartOfSpeech_Reciprocity_RawValue(PartOfSpeech *message, int32_t value) {
  GPBDescriptor *descriptor = [PartOfSpeech descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PartOfSpeech_FieldNumber_Reciprocity];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PartOfSpeech_Tense_RawValue(PartOfSpeech *message) {
  GPBDescriptor *descriptor = [PartOfSpeech descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PartOfSpeech_FieldNumber_Tense];
  return GPBGetMessageInt32Field(message, field);
}

void SetPartOfSpeech_Tense_RawValue(PartOfSpeech *message, int32_t value) {
  GPBDescriptor *descriptor = [PartOfSpeech descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PartOfSpeech_FieldNumber_Tense];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PartOfSpeech_Voice_RawValue(PartOfSpeech *message) {
  GPBDescriptor *descriptor = [PartOfSpeech descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PartOfSpeech_FieldNumber_Voice];
  return GPBGetMessageInt32Field(message, field);
}

void SetPartOfSpeech_Voice_RawValue(PartOfSpeech *message, int32_t value) {
  GPBDescriptor *descriptor = [PartOfSpeech descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PartOfSpeech_FieldNumber_Voice];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Enum PartOfSpeech_Tag

GPBEnumDescriptor *PartOfSpeech_Tag_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "Unknown\000Adj\000Adp\000Adv\000Conj\000Det\000Noun\000Num\000Pr"
        "on\000Prt\000Punct\000Verb\000X\000Affix\000";
    static const int32_t values[] = {
        PartOfSpeech_Tag_Unknown,
        PartOfSpeech_Tag_Adj,
        PartOfSpeech_Tag_Adp,
        PartOfSpeech_Tag_Adv,
        PartOfSpeech_Tag_Conj,
        PartOfSpeech_Tag_Det,
        PartOfSpeech_Tag_Noun,
        PartOfSpeech_Tag_Num,
        PartOfSpeech_Tag_Pron,
        PartOfSpeech_Tag_Prt,
        PartOfSpeech_Tag_Punct,
        PartOfSpeech_Tag_Verb,
        PartOfSpeech_Tag_X,
        PartOfSpeech_Tag_Affix,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PartOfSpeech_Tag)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PartOfSpeech_Tag_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PartOfSpeech_Tag_IsValidValue(int32_t value__) {
  switch (value__) {
    case PartOfSpeech_Tag_Unknown:
    case PartOfSpeech_Tag_Adj:
    case PartOfSpeech_Tag_Adp:
    case PartOfSpeech_Tag_Adv:
    case PartOfSpeech_Tag_Conj:
    case PartOfSpeech_Tag_Det:
    case PartOfSpeech_Tag_Noun:
    case PartOfSpeech_Tag_Num:
    case PartOfSpeech_Tag_Pron:
    case PartOfSpeech_Tag_Prt:
    case PartOfSpeech_Tag_Punct:
    case PartOfSpeech_Tag_Verb:
    case PartOfSpeech_Tag_X:
    case PartOfSpeech_Tag_Affix:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PartOfSpeech_Aspect

GPBEnumDescriptor *PartOfSpeech_Aspect_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "AspectUnknown\000Perfective\000Imperfective\000Pr"
        "ogressive\000";
    static const int32_t values[] = {
        PartOfSpeech_Aspect_AspectUnknown,
        PartOfSpeech_Aspect_Perfective,
        PartOfSpeech_Aspect_Imperfective,
        PartOfSpeech_Aspect_Progressive,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PartOfSpeech_Aspect)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PartOfSpeech_Aspect_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PartOfSpeech_Aspect_IsValidValue(int32_t value__) {
  switch (value__) {
    case PartOfSpeech_Aspect_AspectUnknown:
    case PartOfSpeech_Aspect_Perfective:
    case PartOfSpeech_Aspect_Imperfective:
    case PartOfSpeech_Aspect_Progressive:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PartOfSpeech_Case

GPBEnumDescriptor *PartOfSpeech_Case_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "CaseUnknown\000Accusative\000Adverbial\000Complem"
        "entive\000Dative\000Genitive\000Instrumental\000Loca"
        "tive\000Nominative\000Oblique\000Partitive\000Prepos"
        "itional\000ReflexiveCase\000RelativeCase\000Vocat"
        "ive\000";
    static const int32_t values[] = {
        PartOfSpeech_Case_CaseUnknown,
        PartOfSpeech_Case_Accusative,
        PartOfSpeech_Case_Adverbial,
        PartOfSpeech_Case_Complementive,
        PartOfSpeech_Case_Dative,
        PartOfSpeech_Case_Genitive,
        PartOfSpeech_Case_Instrumental,
        PartOfSpeech_Case_Locative,
        PartOfSpeech_Case_Nominative,
        PartOfSpeech_Case_Oblique,
        PartOfSpeech_Case_Partitive,
        PartOfSpeech_Case_Prepositional,
        PartOfSpeech_Case_ReflexiveCase,
        PartOfSpeech_Case_RelativeCase,
        PartOfSpeech_Case_Vocative,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PartOfSpeech_Case)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PartOfSpeech_Case_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PartOfSpeech_Case_IsValidValue(int32_t value__) {
  switch (value__) {
    case PartOfSpeech_Case_CaseUnknown:
    case PartOfSpeech_Case_Accusative:
    case PartOfSpeech_Case_Adverbial:
    case PartOfSpeech_Case_Complementive:
    case PartOfSpeech_Case_Dative:
    case PartOfSpeech_Case_Genitive:
    case PartOfSpeech_Case_Instrumental:
    case PartOfSpeech_Case_Locative:
    case PartOfSpeech_Case_Nominative:
    case PartOfSpeech_Case_Oblique:
    case PartOfSpeech_Case_Partitive:
    case PartOfSpeech_Case_Prepositional:
    case PartOfSpeech_Case_ReflexiveCase:
    case PartOfSpeech_Case_RelativeCase:
    case PartOfSpeech_Case_Vocative:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PartOfSpeech_Form

GPBEnumDescriptor *PartOfSpeech_Form_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "FormUnknown\000Adnomial\000Auxiliary\000Complemen"
        "tizer\000FinalEnding\000Gerund\000Realis\000Irrealis"
        "\000Short\000Long\000Order\000Specific\000";
    static const int32_t values[] = {
        PartOfSpeech_Form_FormUnknown,
        PartOfSpeech_Form_Adnomial,
        PartOfSpeech_Form_Auxiliary,
        PartOfSpeech_Form_Complementizer,
        PartOfSpeech_Form_FinalEnding,
        PartOfSpeech_Form_Gerund,
        PartOfSpeech_Form_Realis,
        PartOfSpeech_Form_Irrealis,
        PartOfSpeech_Form_Short,
        PartOfSpeech_Form_Long,
        PartOfSpeech_Form_Order,
        PartOfSpeech_Form_Specific,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PartOfSpeech_Form)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PartOfSpeech_Form_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PartOfSpeech_Form_IsValidValue(int32_t value__) {
  switch (value__) {
    case PartOfSpeech_Form_FormUnknown:
    case PartOfSpeech_Form_Adnomial:
    case PartOfSpeech_Form_Auxiliary:
    case PartOfSpeech_Form_Complementizer:
    case PartOfSpeech_Form_FinalEnding:
    case PartOfSpeech_Form_Gerund:
    case PartOfSpeech_Form_Realis:
    case PartOfSpeech_Form_Irrealis:
    case PartOfSpeech_Form_Short:
    case PartOfSpeech_Form_Long:
    case PartOfSpeech_Form_Order:
    case PartOfSpeech_Form_Specific:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PartOfSpeech_Gender

GPBEnumDescriptor *PartOfSpeech_Gender_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "GenderUnknown\000Feminine\000Masculine\000Neuter\000";
    static const int32_t values[] = {
        PartOfSpeech_Gender_GenderUnknown,
        PartOfSpeech_Gender_Feminine,
        PartOfSpeech_Gender_Masculine,
        PartOfSpeech_Gender_Neuter,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PartOfSpeech_Gender)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PartOfSpeech_Gender_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PartOfSpeech_Gender_IsValidValue(int32_t value__) {
  switch (value__) {
    case PartOfSpeech_Gender_GenderUnknown:
    case PartOfSpeech_Gender_Feminine:
    case PartOfSpeech_Gender_Masculine:
    case PartOfSpeech_Gender_Neuter:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PartOfSpeech_Mood

GPBEnumDescriptor *PartOfSpeech_Mood_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "MoodUnknown\000ConditionalMood\000Imperative\000I"
        "ndicative\000Interrogative\000Jussive\000Subjunct"
        "ive\000";
    static const int32_t values[] = {
        PartOfSpeech_Mood_MoodUnknown,
        PartOfSpeech_Mood_ConditionalMood,
        PartOfSpeech_Mood_Imperative,
        PartOfSpeech_Mood_Indicative,
        PartOfSpeech_Mood_Interrogative,
        PartOfSpeech_Mood_Jussive,
        PartOfSpeech_Mood_Subjunctive,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PartOfSpeech_Mood)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PartOfSpeech_Mood_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PartOfSpeech_Mood_IsValidValue(int32_t value__) {
  switch (value__) {
    case PartOfSpeech_Mood_MoodUnknown:
    case PartOfSpeech_Mood_ConditionalMood:
    case PartOfSpeech_Mood_Imperative:
    case PartOfSpeech_Mood_Indicative:
    case PartOfSpeech_Mood_Interrogative:
    case PartOfSpeech_Mood_Jussive:
    case PartOfSpeech_Mood_Subjunctive:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PartOfSpeech_Number

GPBEnumDescriptor *PartOfSpeech_Number_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "NumberUnknown\000Singular\000Plural\000Dual\000";
    static const int32_t values[] = {
        PartOfSpeech_Number_NumberUnknown,
        PartOfSpeech_Number_Singular,
        PartOfSpeech_Number_Plural,
        PartOfSpeech_Number_Dual,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PartOfSpeech_Number)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PartOfSpeech_Number_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PartOfSpeech_Number_IsValidValue(int32_t value__) {
  switch (value__) {
    case PartOfSpeech_Number_NumberUnknown:
    case PartOfSpeech_Number_Singular:
    case PartOfSpeech_Number_Plural:
    case PartOfSpeech_Number_Dual:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PartOfSpeech_Person

GPBEnumDescriptor *PartOfSpeech_Person_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "PersonUnknown\000First\000Second\000Third\000Reflexi"
        "vePerson\000";
    static const int32_t values[] = {
        PartOfSpeech_Person_PersonUnknown,
        PartOfSpeech_Person_First,
        PartOfSpeech_Person_Second,
        PartOfSpeech_Person_Third,
        PartOfSpeech_Person_ReflexivePerson,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PartOfSpeech_Person)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PartOfSpeech_Person_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PartOfSpeech_Person_IsValidValue(int32_t value__) {
  switch (value__) {
    case PartOfSpeech_Person_PersonUnknown:
    case PartOfSpeech_Person_First:
    case PartOfSpeech_Person_Second:
    case PartOfSpeech_Person_Third:
    case PartOfSpeech_Person_ReflexivePerson:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PartOfSpeech_Proper

GPBEnumDescriptor *PartOfSpeech_Proper_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "ProperUnknown\000Proper\000NotProper\000";
    static const int32_t values[] = {
        PartOfSpeech_Proper_ProperUnknown,
        PartOfSpeech_Proper_Proper,
        PartOfSpeech_Proper_NotProper,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PartOfSpeech_Proper)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PartOfSpeech_Proper_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PartOfSpeech_Proper_IsValidValue(int32_t value__) {
  switch (value__) {
    case PartOfSpeech_Proper_ProperUnknown:
    case PartOfSpeech_Proper_Proper:
    case PartOfSpeech_Proper_NotProper:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PartOfSpeech_Reciprocity

GPBEnumDescriptor *PartOfSpeech_Reciprocity_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "ReciprocityUnknown\000Reciprocal\000NonRecipro"
        "cal\000";
    static const int32_t values[] = {
        PartOfSpeech_Reciprocity_ReciprocityUnknown,
        PartOfSpeech_Reciprocity_Reciprocal,
        PartOfSpeech_Reciprocity_NonReciprocal,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PartOfSpeech_Reciprocity)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PartOfSpeech_Reciprocity_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PartOfSpeech_Reciprocity_IsValidValue(int32_t value__) {
  switch (value__) {
    case PartOfSpeech_Reciprocity_ReciprocityUnknown:
    case PartOfSpeech_Reciprocity_Reciprocal:
    case PartOfSpeech_Reciprocity_NonReciprocal:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PartOfSpeech_Tense

GPBEnumDescriptor *PartOfSpeech_Tense_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "TenseUnknown\000ConditionalTense\000Future\000Pas"
        "t\000Present\000Imperfect\000Pluperfect\000";
    static const int32_t values[] = {
        PartOfSpeech_Tense_TenseUnknown,
        PartOfSpeech_Tense_ConditionalTense,
        PartOfSpeech_Tense_Future,
        PartOfSpeech_Tense_Past,
        PartOfSpeech_Tense_Present,
        PartOfSpeech_Tense_Imperfect,
        PartOfSpeech_Tense_Pluperfect,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PartOfSpeech_Tense)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PartOfSpeech_Tense_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PartOfSpeech_Tense_IsValidValue(int32_t value__) {
  switch (value__) {
    case PartOfSpeech_Tense_TenseUnknown:
    case PartOfSpeech_Tense_ConditionalTense:
    case PartOfSpeech_Tense_Future:
    case PartOfSpeech_Tense_Past:
    case PartOfSpeech_Tense_Present:
    case PartOfSpeech_Tense_Imperfect:
    case PartOfSpeech_Tense_Pluperfect:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PartOfSpeech_Voice

GPBEnumDescriptor *PartOfSpeech_Voice_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "VoiceUnknown\000Active\000Causative\000Passive\000";
    static const int32_t values[] = {
        PartOfSpeech_Voice_VoiceUnknown,
        PartOfSpeech_Voice_Active,
        PartOfSpeech_Voice_Causative,
        PartOfSpeech_Voice_Passive,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PartOfSpeech_Voice)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PartOfSpeech_Voice_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PartOfSpeech_Voice_IsValidValue(int32_t value__) {
  switch (value__) {
    case PartOfSpeech_Voice_VoiceUnknown:
    case PartOfSpeech_Voice_Active:
    case PartOfSpeech_Voice_Causative:
    case PartOfSpeech_Voice_Passive:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - DependencyEdge

@implementation DependencyEdge

@dynamic headTokenIndex;
@dynamic label;

typedef struct DependencyEdge__storage_ {
  uint32_t _has_storage_[1];
  int32_t headTokenIndex;
  DependencyEdge_Label label;
} DependencyEdge__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "headTokenIndex",
        .dataTypeSpecific.className = NULL,
        .number = DependencyEdge_FieldNumber_HeadTokenIndex,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DependencyEdge__storage_, headTokenIndex),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "label",
        .dataTypeSpecific.enumDescFunc = DependencyEdge_Label_EnumDescriptor,
        .number = DependencyEdge_FieldNumber_Label,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(DependencyEdge__storage_, label),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DependencyEdge class]
                                     rootClass:[LanguageServiceRoot class]
                                          file:LanguageServiceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DependencyEdge__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t DependencyEdge_Label_RawValue(DependencyEdge *message) {
  GPBDescriptor *descriptor = [DependencyEdge descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:DependencyEdge_FieldNumber_Label];
  return GPBGetMessageInt32Field(message, field);
}

void SetDependencyEdge_Label_RawValue(DependencyEdge *message, int32_t value) {
  GPBDescriptor *descriptor = [DependencyEdge descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:DependencyEdge_FieldNumber_Label];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Enum DependencyEdge_Label

GPBEnumDescriptor *DependencyEdge_Label_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "Unknown\000Abbrev\000Acomp\000Advcl\000Advmod\000Amod\000A"
        "ppos\000Attr\000Aux\000Auxpass\000Cc\000Ccomp\000Conj\000Csub"
        "j\000Csubjpass\000Dep\000Det\000Discourse\000Dobj\000Expl\000"
        "Goeswith\000Iobj\000Mark\000Mwe\000Mwv\000Neg\000Nn\000Npadvm"
        "od\000Nsubj\000Nsubjpass\000Num\000Number\000P\000Parataxi"
        "s\000Partmod\000Pcomp\000Pobj\000Poss\000Postneg\000Precom"
        "p\000Preconj\000Predet\000Pref\000Prep\000Pronl\000Prt\000Ps\000"
        "Quantmod\000Rcmod\000Rcmodrel\000Rdrop\000Ref\000Remnan"
        "t\000Reparandum\000Root\000Snum\000Suff\000Tmod\000Topic\000V"
        "mod\000Vocative\000Xcomp\000Suffix\000Title\000Advphmod"
        "\000Auxcaus\000Auxvv\000Dtmod\000Foreign\000Kw\000List\000Nom"
        "c\000Nomcsubj\000Nomcsubjpass\000Numc\000Cop\000Disloca"
        "ted\000";
    static const int32_t values[] = {
        DependencyEdge_Label_Unknown,
        DependencyEdge_Label_Abbrev,
        DependencyEdge_Label_Acomp,
        DependencyEdge_Label_Advcl,
        DependencyEdge_Label_Advmod,
        DependencyEdge_Label_Amod,
        DependencyEdge_Label_Appos,
        DependencyEdge_Label_Attr,
        DependencyEdge_Label_Aux,
        DependencyEdge_Label_Auxpass,
        DependencyEdge_Label_Cc,
        DependencyEdge_Label_Ccomp,
        DependencyEdge_Label_Conj,
        DependencyEdge_Label_Csubj,
        DependencyEdge_Label_Csubjpass,
        DependencyEdge_Label_Dep,
        DependencyEdge_Label_Det,
        DependencyEdge_Label_Discourse,
        DependencyEdge_Label_Dobj,
        DependencyEdge_Label_Expl,
        DependencyEdge_Label_Goeswith,
        DependencyEdge_Label_Iobj,
        DependencyEdge_Label_Mark,
        DependencyEdge_Label_Mwe,
        DependencyEdge_Label_Mwv,
        DependencyEdge_Label_Neg,
        DependencyEdge_Label_Nn,
        DependencyEdge_Label_Npadvmod,
        DependencyEdge_Label_Nsubj,
        DependencyEdge_Label_Nsubjpass,
        DependencyEdge_Label_Num,
        DependencyEdge_Label_Number,
        DependencyEdge_Label_P,
        DependencyEdge_Label_Parataxis,
        DependencyEdge_Label_Partmod,
        DependencyEdge_Label_Pcomp,
        DependencyEdge_Label_Pobj,
        DependencyEdge_Label_Poss,
        DependencyEdge_Label_Postneg,
        DependencyEdge_Label_Precomp,
        DependencyEdge_Label_Preconj,
        DependencyEdge_Label_Predet,
        DependencyEdge_Label_Pref,
        DependencyEdge_Label_Prep,
        DependencyEdge_Label_Pronl,
        DependencyEdge_Label_Prt,
        DependencyEdge_Label_Ps,
        DependencyEdge_Label_Quantmod,
        DependencyEdge_Label_Rcmod,
        DependencyEdge_Label_Rcmodrel,
        DependencyEdge_Label_Rdrop,
        DependencyEdge_Label_Ref,
        DependencyEdge_Label_Remnant,
        DependencyEdge_Label_Reparandum,
        DependencyEdge_Label_Root,
        DependencyEdge_Label_Snum,
        DependencyEdge_Label_Suff,
        DependencyEdge_Label_Tmod,
        DependencyEdge_Label_Topic,
        DependencyEdge_Label_Vmod,
        DependencyEdge_Label_Vocative,
        DependencyEdge_Label_Xcomp,
        DependencyEdge_Label_Suffix,
        DependencyEdge_Label_Title,
        DependencyEdge_Label_Advphmod,
        DependencyEdge_Label_Auxcaus,
        DependencyEdge_Label_Auxvv,
        DependencyEdge_Label_Dtmod,
        DependencyEdge_Label_Foreign,
        DependencyEdge_Label_Kw,
        DependencyEdge_Label_List,
        DependencyEdge_Label_Nomc,
        DependencyEdge_Label_Nomcsubj,
        DependencyEdge_Label_Nomcsubjpass,
        DependencyEdge_Label_Numc,
        DependencyEdge_Label_Cop,
        DependencyEdge_Label_Dislocated,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(DependencyEdge_Label)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:DependencyEdge_Label_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL DependencyEdge_Label_IsValidValue(int32_t value__) {
  switch (value__) {
    case DependencyEdge_Label_Unknown:
    case DependencyEdge_Label_Abbrev:
    case DependencyEdge_Label_Acomp:
    case DependencyEdge_Label_Advcl:
    case DependencyEdge_Label_Advmod:
    case DependencyEdge_Label_Amod:
    case DependencyEdge_Label_Appos:
    case DependencyEdge_Label_Attr:
    case DependencyEdge_Label_Aux:
    case DependencyEdge_Label_Auxpass:
    case DependencyEdge_Label_Cc:
    case DependencyEdge_Label_Ccomp:
    case DependencyEdge_Label_Conj:
    case DependencyEdge_Label_Csubj:
    case DependencyEdge_Label_Csubjpass:
    case DependencyEdge_Label_Dep:
    case DependencyEdge_Label_Det:
    case DependencyEdge_Label_Discourse:
    case DependencyEdge_Label_Dobj:
    case DependencyEdge_Label_Expl:
    case DependencyEdge_Label_Goeswith:
    case DependencyEdge_Label_Iobj:
    case DependencyEdge_Label_Mark:
    case DependencyEdge_Label_Mwe:
    case DependencyEdge_Label_Mwv:
    case DependencyEdge_Label_Neg:
    case DependencyEdge_Label_Nn:
    case DependencyEdge_Label_Npadvmod:
    case DependencyEdge_Label_Nsubj:
    case DependencyEdge_Label_Nsubjpass:
    case DependencyEdge_Label_Num:
    case DependencyEdge_Label_Number:
    case DependencyEdge_Label_P:
    case DependencyEdge_Label_Parataxis:
    case DependencyEdge_Label_Partmod:
    case DependencyEdge_Label_Pcomp:
    case DependencyEdge_Label_Pobj:
    case DependencyEdge_Label_Poss:
    case DependencyEdge_Label_Postneg:
    case DependencyEdge_Label_Precomp:
    case DependencyEdge_Label_Preconj:
    case DependencyEdge_Label_Predet:
    case DependencyEdge_Label_Pref:
    case DependencyEdge_Label_Prep:
    case DependencyEdge_Label_Pronl:
    case DependencyEdge_Label_Prt:
    case DependencyEdge_Label_Ps:
    case DependencyEdge_Label_Quantmod:
    case DependencyEdge_Label_Rcmod:
    case DependencyEdge_Label_Rcmodrel:
    case DependencyEdge_Label_Rdrop:
    case DependencyEdge_Label_Ref:
    case DependencyEdge_Label_Remnant:
    case DependencyEdge_Label_Reparandum:
    case DependencyEdge_Label_Root:
    case DependencyEdge_Label_Snum:
    case DependencyEdge_Label_Suff:
    case DependencyEdge_Label_Tmod:
    case DependencyEdge_Label_Topic:
    case DependencyEdge_Label_Vmod:
    case DependencyEdge_Label_Vocative:
    case DependencyEdge_Label_Xcomp:
    case DependencyEdge_Label_Suffix:
    case DependencyEdge_Label_Title:
    case DependencyEdge_Label_Advphmod:
    case DependencyEdge_Label_Auxcaus:
    case DependencyEdge_Label_Auxvv:
    case DependencyEdge_Label_Dtmod:
    case DependencyEdge_Label_Foreign:
    case DependencyEdge_Label_Kw:
    case DependencyEdge_Label_List:
    case DependencyEdge_Label_Nomc:
    case DependencyEdge_Label_Nomcsubj:
    case DependencyEdge_Label_Nomcsubjpass:
    case DependencyEdge_Label_Numc:
    case DependencyEdge_Label_Cop:
    case DependencyEdge_Label_Dislocated:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - EntityMention

@implementation EntityMention

@dynamic hasText, text;
@dynamic type;

typedef struct EntityMention__storage_ {
  uint32_t _has_storage_[1];
  EntityMention_Type type;
  TextSpan *text;
} EntityMention__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "text",
        .dataTypeSpecific.className = GPBStringifySymbol(TextSpan),
        .number = EntityMention_FieldNumber_Text,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(EntityMention__storage_, text),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = EntityMention_Type_EnumDescriptor,
        .number = EntityMention_FieldNumber_Type,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(EntityMention__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[EntityMention class]
                                     rootClass:[LanguageServiceRoot class]
                                          file:LanguageServiceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(EntityMention__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t EntityMention_Type_RawValue(EntityMention *message) {
  GPBDescriptor *descriptor = [EntityMention descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:EntityMention_FieldNumber_Type];
  return GPBGetMessageInt32Field(message, field);
}

void SetEntityMention_Type_RawValue(EntityMention *message, int32_t value) {
  GPBDescriptor *descriptor = [EntityMention descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:EntityMention_FieldNumber_Type];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Enum EntityMention_Type

GPBEnumDescriptor *EntityMention_Type_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "TypeUnknown\000Proper\000Common\000";
    static const int32_t values[] = {
        EntityMention_Type_TypeUnknown,
        EntityMention_Type_Proper,
        EntityMention_Type_Common,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(EntityMention_Type)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:EntityMention_Type_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL EntityMention_Type_IsValidValue(int32_t value__) {
  switch (value__) {
    case EntityMention_Type_TypeUnknown:
    case EntityMention_Type_Proper:
    case EntityMention_Type_Common:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - TextSpan

@implementation TextSpan

@dynamic content;
@dynamic beginOffset;

typedef struct TextSpan__storage_ {
  uint32_t _has_storage_[1];
  int32_t beginOffset;
  NSString *content;
} TextSpan__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "content",
        .dataTypeSpecific.className = NULL,
        .number = TextSpan_FieldNumber_Content,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(TextSpan__storage_, content),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "beginOffset",
        .dataTypeSpecific.className = NULL,
        .number = TextSpan_FieldNumber_BeginOffset,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(TextSpan__storage_, beginOffset),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[TextSpan class]
                                     rootClass:[LanguageServiceRoot class]
                                          file:LanguageServiceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(TextSpan__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - AnalyzeSentimentRequest

@implementation AnalyzeSentimentRequest

@dynamic hasDocument, document;
@dynamic encodingType;

typedef struct AnalyzeSentimentRequest__storage_ {
  uint32_t _has_storage_[1];
  EncodingType encodingType;
  Document *document;
} AnalyzeSentimentRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "document",
        .dataTypeSpecific.className = GPBStringifySymbol(Document),
        .number = AnalyzeSentimentRequest_FieldNumber_Document,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(AnalyzeSentimentRequest__storage_, document),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "encodingType",
        .dataTypeSpecific.enumDescFunc = EncodingType_EnumDescriptor,
        .number = AnalyzeSentimentRequest_FieldNumber_EncodingType,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(AnalyzeSentimentRequest__storage_, encodingType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[AnalyzeSentimentRequest class]
                                     rootClass:[LanguageServiceRoot class]
                                          file:LanguageServiceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(AnalyzeSentimentRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t AnalyzeSentimentRequest_EncodingType_RawValue(AnalyzeSentimentRequest *message) {
  GPBDescriptor *descriptor = [AnalyzeSentimentRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:AnalyzeSentimentRequest_FieldNumber_EncodingType];
  return GPBGetMessageInt32Field(message, field);
}

void SetAnalyzeSentimentRequest_EncodingType_RawValue(AnalyzeSentimentRequest *message, int32_t value) {
  GPBDescriptor *descriptor = [AnalyzeSentimentRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:AnalyzeSentimentRequest_FieldNumber_EncodingType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - AnalyzeSentimentResponse

@implementation AnalyzeSentimentResponse

@dynamic hasDocumentSentiment, documentSentiment;
@dynamic language;
@dynamic sentencesArray, sentencesArray_Count;

typedef struct AnalyzeSentimentResponse__storage_ {
  uint32_t _has_storage_[1];
  Sentiment *documentSentiment;
  NSString *language;
  NSMutableArray *sentencesArray;
} AnalyzeSentimentResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "documentSentiment",
        .dataTypeSpecific.className = GPBStringifySymbol(Sentiment),
        .number = AnalyzeSentimentResponse_FieldNumber_DocumentSentiment,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(AnalyzeSentimentResponse__storage_, documentSentiment),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "language",
        .dataTypeSpecific.className = NULL,
        .number = AnalyzeSentimentResponse_FieldNumber_Language,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(AnalyzeSentimentResponse__storage_, language),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "sentencesArray",
        .dataTypeSpecific.className = GPBStringifySymbol(Sentence),
        .number = AnalyzeSentimentResponse_FieldNumber_SentencesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(AnalyzeSentimentResponse__storage_, sentencesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[AnalyzeSentimentResponse class]
                                     rootClass:[LanguageServiceRoot class]
                                          file:LanguageServiceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(AnalyzeSentimentResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - AnalyzeEntitiesRequest

@implementation AnalyzeEntitiesRequest

@dynamic hasDocument, document;
@dynamic encodingType;

typedef struct AnalyzeEntitiesRequest__storage_ {
  uint32_t _has_storage_[1];
  EncodingType encodingType;
  Document *document;
} AnalyzeEntitiesRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "document",
        .dataTypeSpecific.className = GPBStringifySymbol(Document),
        .number = AnalyzeEntitiesRequest_FieldNumber_Document,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(AnalyzeEntitiesRequest__storage_, document),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "encodingType",
        .dataTypeSpecific.enumDescFunc = EncodingType_EnumDescriptor,
        .number = AnalyzeEntitiesRequest_FieldNumber_EncodingType,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(AnalyzeEntitiesRequest__storage_, encodingType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[AnalyzeEntitiesRequest class]
                                     rootClass:[LanguageServiceRoot class]
                                          file:LanguageServiceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(AnalyzeEntitiesRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t AnalyzeEntitiesRequest_EncodingType_RawValue(AnalyzeEntitiesRequest *message) {
  GPBDescriptor *descriptor = [AnalyzeEntitiesRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:AnalyzeEntitiesRequest_FieldNumber_EncodingType];
  return GPBGetMessageInt32Field(message, field);
}

void SetAnalyzeEntitiesRequest_EncodingType_RawValue(AnalyzeEntitiesRequest *message, int32_t value) {
  GPBDescriptor *descriptor = [AnalyzeEntitiesRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:AnalyzeEntitiesRequest_FieldNumber_EncodingType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - AnalyzeEntitiesResponse

@implementation AnalyzeEntitiesResponse

@dynamic entitiesArray, entitiesArray_Count;
@dynamic language;

typedef struct AnalyzeEntitiesResponse__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *entitiesArray;
  NSString *language;
} AnalyzeEntitiesResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "entitiesArray",
        .dataTypeSpecific.className = GPBStringifySymbol(Entity),
        .number = AnalyzeEntitiesResponse_FieldNumber_EntitiesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(AnalyzeEntitiesResponse__storage_, entitiesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "language",
        .dataTypeSpecific.className = NULL,
        .number = AnalyzeEntitiesResponse_FieldNumber_Language,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(AnalyzeEntitiesResponse__storage_, language),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[AnalyzeEntitiesResponse class]
                                     rootClass:[LanguageServiceRoot class]
                                          file:LanguageServiceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(AnalyzeEntitiesResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - AnalyzeSyntaxRequest

@implementation AnalyzeSyntaxRequest

@dynamic hasDocument, document;
@dynamic encodingType;

typedef struct AnalyzeSyntaxRequest__storage_ {
  uint32_t _has_storage_[1];
  EncodingType encodingType;
  Document *document;
} AnalyzeSyntaxRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "document",
        .dataTypeSpecific.className = GPBStringifySymbol(Document),
        .number = AnalyzeSyntaxRequest_FieldNumber_Document,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(AnalyzeSyntaxRequest__storage_, document),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "encodingType",
        .dataTypeSpecific.enumDescFunc = EncodingType_EnumDescriptor,
        .number = AnalyzeSyntaxRequest_FieldNumber_EncodingType,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(AnalyzeSyntaxRequest__storage_, encodingType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[AnalyzeSyntaxRequest class]
                                     rootClass:[LanguageServiceRoot class]
                                          file:LanguageServiceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(AnalyzeSyntaxRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t AnalyzeSyntaxRequest_EncodingType_RawValue(AnalyzeSyntaxRequest *message) {
  GPBDescriptor *descriptor = [AnalyzeSyntaxRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:AnalyzeSyntaxRequest_FieldNumber_EncodingType];
  return GPBGetMessageInt32Field(message, field);
}

void SetAnalyzeSyntaxRequest_EncodingType_RawValue(AnalyzeSyntaxRequest *message, int32_t value) {
  GPBDescriptor *descriptor = [AnalyzeSyntaxRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:AnalyzeSyntaxRequest_FieldNumber_EncodingType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - AnalyzeSyntaxResponse

@implementation AnalyzeSyntaxResponse

@dynamic sentencesArray, sentencesArray_Count;
@dynamic tokensArray, tokensArray_Count;
@dynamic language;

typedef struct AnalyzeSyntaxResponse__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *sentencesArray;
  NSMutableArray *tokensArray;
  NSString *language;
} AnalyzeSyntaxResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sentencesArray",
        .dataTypeSpecific.className = GPBStringifySymbol(Sentence),
        .number = AnalyzeSyntaxResponse_FieldNumber_SentencesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(AnalyzeSyntaxResponse__storage_, sentencesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "tokensArray",
        .dataTypeSpecific.className = GPBStringifySymbol(Token),
        .number = AnalyzeSyntaxResponse_FieldNumber_TokensArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(AnalyzeSyntaxResponse__storage_, tokensArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "language",
        .dataTypeSpecific.className = NULL,
        .number = AnalyzeSyntaxResponse_FieldNumber_Language,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(AnalyzeSyntaxResponse__storage_, language),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[AnalyzeSyntaxResponse class]
                                     rootClass:[LanguageServiceRoot class]
                                          file:LanguageServiceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(AnalyzeSyntaxResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - AnnotateTextRequest

@implementation AnnotateTextRequest

@dynamic hasDocument, document;
@dynamic hasFeatures, features;
@dynamic encodingType;

typedef struct AnnotateTextRequest__storage_ {
  uint32_t _has_storage_[1];
  EncodingType encodingType;
  Document *document;
  AnnotateTextRequest_Features *features;
} AnnotateTextRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "document",
        .dataTypeSpecific.className = GPBStringifySymbol(Document),
        .number = AnnotateTextRequest_FieldNumber_Document,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(AnnotateTextRequest__storage_, document),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "features",
        .dataTypeSpecific.className = GPBStringifySymbol(AnnotateTextRequest_Features),
        .number = AnnotateTextRequest_FieldNumber_Features,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(AnnotateTextRequest__storage_, features),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "encodingType",
        .dataTypeSpecific.enumDescFunc = EncodingType_EnumDescriptor,
        .number = AnnotateTextRequest_FieldNumber_EncodingType,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(AnnotateTextRequest__storage_, encodingType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[AnnotateTextRequest class]
                                     rootClass:[LanguageServiceRoot class]
                                          file:LanguageServiceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(AnnotateTextRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t AnnotateTextRequest_EncodingType_RawValue(AnnotateTextRequest *message) {
  GPBDescriptor *descriptor = [AnnotateTextRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:AnnotateTextRequest_FieldNumber_EncodingType];
  return GPBGetMessageInt32Field(message, field);
}

void SetAnnotateTextRequest_EncodingType_RawValue(AnnotateTextRequest *message, int32_t value) {
  GPBDescriptor *descriptor = [AnnotateTextRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:AnnotateTextRequest_FieldNumber_EncodingType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - AnnotateTextRequest_Features

@implementation AnnotateTextRequest_Features

@dynamic extractSyntax;
@dynamic extractEntities;
@dynamic extractDocumentSentiment;

typedef struct AnnotateTextRequest_Features__storage_ {
  uint32_t _has_storage_[1];
} AnnotateTextRequest_Features__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "extractSyntax",
        .dataTypeSpecific.className = NULL,
        .number = AnnotateTextRequest_Features_FieldNumber_ExtractSyntax,
        .hasIndex = 0,
        .offset = 1,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "extractEntities",
        .dataTypeSpecific.className = NULL,
        .number = AnnotateTextRequest_Features_FieldNumber_ExtractEntities,
        .hasIndex = 2,
        .offset = 3,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "extractDocumentSentiment",
        .dataTypeSpecific.className = NULL,
        .number = AnnotateTextRequest_Features_FieldNumber_ExtractDocumentSentiment,
        .hasIndex = 4,
        .offset = 5,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[AnnotateTextRequest_Features class]
                                     rootClass:[LanguageServiceRoot class]
                                          file:LanguageServiceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(AnnotateTextRequest_Features__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(AnnotateTextRequest)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - AnnotateTextResponse

@implementation AnnotateTextResponse

@dynamic sentencesArray, sentencesArray_Count;
@dynamic tokensArray, tokensArray_Count;
@dynamic entitiesArray, entitiesArray_Count;
@dynamic hasDocumentSentiment, documentSentiment;
@dynamic language;

typedef struct AnnotateTextResponse__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *sentencesArray;
  NSMutableArray *tokensArray;
  NSMutableArray *entitiesArray;
  Sentiment *documentSentiment;
  NSString *language;
} AnnotateTextResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sentencesArray",
        .dataTypeSpecific.className = GPBStringifySymbol(Sentence),
        .number = AnnotateTextResponse_FieldNumber_SentencesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(AnnotateTextResponse__storage_, sentencesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "tokensArray",
        .dataTypeSpecific.className = GPBStringifySymbol(Token),
        .number = AnnotateTextResponse_FieldNumber_TokensArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(AnnotateTextResponse__storage_, tokensArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "entitiesArray",
        .dataTypeSpecific.className = GPBStringifySymbol(Entity),
        .number = AnnotateTextResponse_FieldNumber_EntitiesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(AnnotateTextResponse__storage_, entitiesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "documentSentiment",
        .dataTypeSpecific.className = GPBStringifySymbol(Sentiment),
        .number = AnnotateTextResponse_FieldNumber_DocumentSentiment,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(AnnotateTextResponse__storage_, documentSentiment),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "language",
        .dataTypeSpecific.className = NULL,
        .number = AnnotateTextResponse_FieldNumber_Language,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(AnnotateTextResponse__storage_, language),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[AnnotateTextResponse class]
                                     rootClass:[LanguageServiceRoot class]
                                          file:LanguageServiceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(AnnotateTextResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
